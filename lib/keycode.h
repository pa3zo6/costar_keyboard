/*
Copyright 2011,2012 Jun Wako <wakojun@gmail.com>
Aggressively modified by Fredrik Atmer 2013

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/* 
 * Keycodes based on HID Usage Keyboard/Keypad Page(0x07) plus special codes
 * http://www.usb.org/developers/devclass_docs/Hut1_12.pdf
 */
#ifndef KEYCODE_H
#define KEYCODE_H

enum modifier {
  LCTL = 0x01,
  LSFT = 0x02,
  LALT = 0x04,
  LGUI = 0x08,
  RCTL = 0x10,
  RSFT = 0x20,
  RALT = 0x40,
  RGUI = 0x80
};

struct KeyDef {
  uint16_t type;
  uint16_t value;
};

#define NORMAL                0x00
#define MODIFIER              0x01
#define TAPPABLE_MODIFIER     0x02
#define LAYERLOCK             0x03
#define TAPPABLE_LAYERSHIFT   0x04

#define IS_MODIFIER(key)              ((TYPE(key) & 0xff) == MODIFIER)
#define IS_TAPPABLE_MODIFIER(key)     ((TYPE(key) & 0xff) == TAPPABLE_MODIFIER)
#define IS_LAYERLOCK(key)             ((TYPE(key) & 0xff) == LAYERLOCK)
#define IS_TAPPABLE_LAYERSHIFT(key)   ((TYPE(key) & 0xff) == TAPPABLE_LAYERSHIFT)
#define IS_MODDED(key)                ((VALUE(key) & 0xff00) != 0)

#define GET_LAYER(key)                  ((TYPE(key)&0xff00) >> 8)
#define GET_TAPPABLE_MODIFIER(key)      ((TYPE(key)&0xff00) >> 8)
#define GET_ADDITIONAL_MODIFIERS(key)   ((VALUE(key)&0xff00) >> 8)

#define LAYER(layer)                {(layer<<8) | TAPPABLE_LAYERSHIFT,  KEY_NO}
#define LLAYER(layer)               {(layer<<8) | LAYERLOCK,            KEY_NO}
#define TLAYER(layer,keyValue)      {(layer<<8) | TAPPABLE_LAYERSHIFT,  keyValue}
#define TMODIFIER(mod,keyValue)     {(mod<<8)   | TAPPABLE_MODIFIER,    keyValue}

#define MODDED(key, mods) (KEY_##key | ((mods) << 8))

/* Short names */
#define KC_NO   {NORMAL, KEY_NO}

#define KC_LCTL {MODIFIER, 0x01}
#define KC_LSFT {MODIFIER, 0x02}
#define KC_LALT {MODIFIER, 0x04}
#define KC_LGUI {MODIFIER, 0x08}
#define KC_RCTL {MODIFIER, 0x10}
#define KC_RSFT {MODIFIER, 0x20}
#define KC_RALT {MODIFIER, 0x40}
#define KC_RGUI {MODIFIER, 0x80}

#define KC_A    {NORMAL, KEY_A}
#define KC_aA   {NORMAL, MODDED(A,LALT)}
#define KC_cA   {NORMAL, MODDED(A,LCTL)}
#define KC_sA   {NORMAL, MODDED(A,LSFT)}
#define KC_acA  {NORMAL, MODDED(A,LALT|LCTL)}
#define KC_asA  {NORMAL, MODDED(A,LALT|LSFT)}
#define KC_csA  {NORMAL, MODDED(A,LCTL|LSFT)}
#define KC_acsA {NORMAL, MODDED(A,LALT|LCTL|LSFT)}

#define KC_B    {NORMAL, KEY_B}
#define KC_aB   {NORMAL, MODDED(B,LALT)}
#define KC_cB   {NORMAL, MODDED(B,LCTL)}
#define KC_sB   {NORMAL, MODDED(B,LSFT)}
#define KC_acB  {NORMAL, MODDED(B,LALT|LCTL)}
#define KC_asB  {NORMAL, MODDED(B,LALT|LSFT)}
#define KC_csB  {NORMAL, MODDED(B,LCLT|LSFT)}
#define KC_acsB {NORMAL, MODDED(B,LALT|LCTL|LSFT)}

#define KC_C    {NORMAL, KEY_C}
#define KC_aC   {NORMAL, MODDED(C,LALT)}
#define KC_cC   {NORMAL, MODDED(C,LCTL)}
#define KC_sC   {NORMAL, MODDED(C,LSFT)}
#define KC_acC  {NORMAL, MODDED(C,LALT|LCTL)}
#define KC_asC  {NORMAL, MODDED(C,LALT|LSFT)}
#define KC_csC  {NORMAL, MODDED(C,LCTL|LSFT)}
#define KC_acsC {NORMAL, MODDED(C,LALT|LCTL|LSFT)}

#define KC_D    {NORMAL, KEY_D}
#define KC_aD   {NORMAL, MODDED(D,LALT)}
#define KC_cD   {NORMAL, MODDED(D,LCTL)}
#define KC_sD   {NORMAL, MODDED(D,LSFT)}
#define KC_acD  {NORMAL, MODDED(D,LALT|LCTL)}
#define KC_asD  {NORMAL, MODDED(D,LALT|LSFT)}
#define KC_csD  {NORMAL, MODDED(D,LCTL|LSFT)}
#define KC_acsD {NORMAL, MODDED(D,LALT|LCTL|LSFT)}

#define KC_E    {NORMAL, KEY_E}
#define KC_aE   {NORMAL, MODDED(E,LALT)}
#define KC_cE   {NORMAL, MODDED(E,LCTL)}
#define KC_sE   {NORMAL, MODDED(E,LSFT)}
#define KC_acE  {NORMAL, MODDED(E,LALT|LCTL)}
#define KC_asE  {NORMAL, MODDED(E,LALT|LSFT)}
#define KC_csE  {NORMAL, MODDED(E,LCTL|LSFT)}
#define KC_acsE {NORMAL, MODDED(E,LALT|LCTL|LSFT)}

#define KC_F    {NORMAL, KEY_F}
#define KC_aF   {NORMAL, MODDED(F,LALT)}
#define KC_cF   {NORMAL, MODDED(F,LCTL)}
#define KC_sF   {NORMAL, MODDED(F,LSFT)}
#define KC_acF  {NORMAL, MODDED(F,LALT|LCTL)}
#define KC_asF  {NORMAL, MODDED(F,LALT|LSFT)}
#define KC_csF  {NORMAL, MODDED(F,LCTL|LSFT)}
#define KC_acsF {NORMAL, MODDED(F,LALT|LCTL|LSFT)}

#define KC_G    {NORMAL, KEY_G}
#define KC_aG   {NORMAL, MODDED(G,LALT)}
#define KC_cG   {NORMAL, MODDED(G,LCTL)}
#define KC_sG   {NORMAL, MODDED(G,LSFT)}
#define KC_acG  {NORMAL, MODDED(G,LALT|LCTL)}
#define KC_asG  {NORMAL, MODDED(G,LALT|LSFT)}
#define KC_csG  {NORMAL, MODDED(G,LCTL|LSFT)}
#define KC_acsG {NORMAL, MODDED(G,LALT|LCTL|LSFT)}

#define KC_H    {NORMAL, KEY_H}
#define KC_aH   {NORMAL, MODDED(H,LALT)}
#define KC_cH   {NORMAL, MODDED(H,LCTL)}
#define KC_sH   {NORMAL, MODDED(H,LSFT)}
#define KC_acH  {NORMAL, MODDED(H,LALT|LCTL)}
#define KC_asH  {NORMAL, MODDED(H,LALT|LSFT)}
#define KC_csH  {NORMAL, MODDED(H,LCTL|LSFT)}
#define KC_acsH {NORMAL, MODDED(H,LALT|LCTL|LSFT)}

#define KC_I    {NORMAL, KEY_I}
#define KC_aI   {NORMAL, MODDED(I,LALT)}
#define KC_cI   {NORMAL, MODDED(I,LCTL)}
#define KC_sI   {NORMAL, MODDED(I,LSFT)}
#define KC_acI  {NORMAL, MODDED(I,LALT|LCTL)}
#define KC_asI  {NORMAL, MODDED(I,LALT|LSFT)}
#define KC_csI  {NORMAL, MODDED(I,LCTL|LSFT)}
#define KC_acsI {NORMAL, MODDED(I,LALT|LCTL|LSFT)}

#define KC_J    {NORMAL, KEY_J}
#define KC_aJ   {NORMAL, MODDED(J,LALT)}
#define KC_cJ   {NORMAL, MODDED(J,LCTL)}
#define KC_sJ   {NORMAL, MODDED(J,LSFT)}
#define KC_acJ  {NORMAL, MODDED(J,LALT|LCTL)}
#define KC_asJ  {NORMAL, MODDED(J,LALT|LSFT)}
#define KC_csJ  {NORMAL, MODDED(J,LCTL|LSFT)}
#define KC_acsJ {NORMAL, MODDED(J,LALT|LCTL|LSFT)}

#define KC_K    {NORMAL, KEY_K}
#define KC_aK   {NORMAL, MODDED(K,LALT)}
#define KC_cK   {NORMAL, MODDED(K,LCTL)}
#define KC_sK   {NORMAL, MODDED(K,LSFT)}
#define KC_acK  {NORMAL, MODDED(K,LALT|LCTL)}
#define KC_asK  {NORMAL, MODDED(K,LALT|LSFT)}
#define KC_csK  {NORMAL, MODDED(K,LCTL|LSFT)}
#define KC_acsK {NORMAL, MODDED(K,LALT|LCTL|LSFT)}

#define KC_L    {NORMAL, KEY_L}
#define KC_aL   {NORMAL, MODDED(L,LALT)}
#define KC_cL   {NORMAL, MODDED(L,LCTL)}
#define KC_sL   {NORMAL, MODDED(L,LSFT)}
#define KC_acL  {NORMAL, MODDED(L,LALT|LCTL)}
#define KC_asL  {NORMAL, MODDED(L,LALT|LSFT)}
#define KC_csL  {NORMAL, MODDED(L,LCTL|LSFT)}
#define KC_acsL {NORMAL, MODDED(L,LALT|LCTL|LSFT)}

#define KC_M    {NORMAL, KEY_M}
#define KC_aM   {NORMAL, MODDED(M,LALT)}
#define KC_cM   {NORMAL, MODDED(M,LCTL)}
#define KC_sM   {NORMAL, MODDED(M,LSFT)}
#define KC_acM  {NORMAL, MODDED(M,LALT|LCTL)}
#define KC_asM  {NORMAL, MODDED(M,LALT|LSFT)}
#define KC_csM  {NORMAL, MODDED(M,LCTL|LSFT)}
#define KC_acsM {NORMAL, MODDED(M,LALT|LCTL|LSFT)}

#define KC_N    {NORMAL, KEY_N}
#define KC_aN   {NORMAL, MODDED(N,LALT)}
#define KC_cN   {NORMAL, MODDED(N,LCTL)}
#define KC_sN   {NORMAL, MODDED(N,LSFT)}
#define KC_acN  {NORMAL, MODDED(N,LALT|LCTL)}
#define KC_asN  {NORMAL, MODDED(N,LALT|LSFT)}
#define KC_csN  {NORMAL, MODDED(N,LCTL|LSFT)}
#define KC_acsN {NORMAL, MODDED(N,LALT|LCTL|LSFT)}

#define KC_O    {NORMAL, KEY_O}
#define KC_aO   {NORMAL, MODDED(O,LALT)}
#define KC_cO   {NORMAL, MODDED(O,LCTL)}
#define KC_sO   {NORMAL, MODDED(O,LSFT)}
#define KC_acO  {NORMAL, MODDED(O,LALT|LCTL)}
#define KC_asO  {NORMAL, MODDED(O,LALT|LSFT)}
#define KC_csO  {NORMAL, MODDED(O,LCTL|LSFT)}
#define KC_acsO {NORMAL, MODDED(O,LALT|LCTL|LSFT)}

#define KC_P    {NORMAL, KEY_P}
#define KC_aP   {NORMAL, MODDED(P,LALT)}
#define KC_cP   {NORMAL, MODDED(P,LCTL)}
#define KC_sP   {NORMAL, MODDED(P,LSFT)}
#define KC_acP  {NORMAL, MODDED(P,LALT|LCTL)}
#define KC_asP  {NORMAL, MODDED(P,LALT|LSFT)}
#define KC_csP  {NORMAL, MODDED(P,LCTL|LSFT)}
#define KC_acsP {NORMAL, MODDED(P,LALT|LCTL|LSFT)}

#define KC_Q    {NORMAL, KEY_Q}
#define KC_aQ   {NORMAL, MODDED(Q,LALT)}
#define KC_cQ   {NORMAL, MODDED(Q,LCTL)}
#define KC_sQ   {NORMAL, MODDED(Q,LSFT)}
#define KC_acQ  {NORMAL, MODDED(Q,LALT|LCTL)}
#define KC_asQ  {NORMAL, MODDED(Q,LALT|LSFT)}
#define KC_csQ  {NORMAL, MODDED(Q,LCTL|LSFT)}
#define KC_acsQ {NORMAL, MODDED(Q,LALT|LCTL|LSFT)}

#define KC_R    {NORMAL, KEY_R}
#define KC_aR   {NORMAL, MODDED(R,LALT)}
#define KC_cR   {NORMAL, MODDED(R,LCTL)}
#define KC_sR   {NORMAL, MODDED(R,LSFT)}
#define KC_acR  {NORMAL, MODDED(R,LALT|LCTL)}
#define KC_asR  {NORMAL, MODDED(R,LALT|LSFT)}
#define KC_csR  {NORMAL, MODDED(R,LCTL|LSFT)}
#define KC_acsR {NORMAL, MODDED(R,LALT|LCTL|LSFT)}

#define KC_S    {NORMAL, KEY_S}
#define KC_aS   {NORMAL, MODDED(S,LALT)}
#define KC_cS   {NORMAL, MODDED(S,LCTL)}
#define KC_sS   {NORMAL, MODDED(S,LSFT)}
#define KC_acS  {NORMAL, MODDED(S,LALT|LCTL)}
#define KC_asS  {NORMAL, MODDED(S,LALT|LSFT)}
#define KC_csS  {NORMAL, MODDED(S,LCTL|LSFT)}
#define KC_acsS {NORMAL, MODDED(S,LALT|LCTL|LSFT)}

#define KC_T    {NORMAL, KEY_T}
#define KC_aT   {NORMAL, MODDED(T,LALT)}
#define KC_cT   {NORMAL, MODDED(T,LCTL)}
#define KC_sT   {NORMAL, MODDED(T,LSFT)}
#define KC_acT  {NORMAL, MODDED(T,LALT|LCTL)}
#define KC_asT  {NORMAL, MODDED(T,LALT|LSFT)}
#define KC_csT  {NORMAL, MODDED(T,LCTL|LSFT)}
#define KC_acsT {NORMAL, MODDED(T,LALT|LCTL|LSFT)}

#define KC_U    {NORMAL, KEY_U}
#define KC_aU   {NORMAL, MODDED(U,LALT)}
#define KC_cU   {NORMAL, MODDED(U,LCTL)}
#define KC_sU   {NORMAL, MODDED(U,LSFT)}
#define KC_acU  {NORMAL, MODDED(U,LALT|LCTL)}
#define KC_asU  {NORMAL, MODDED(U,LALT|LSFT)}
#define KC_csU  {NORMAL, MODDED(U,LCTL|LSFT)}
#define KC_acsU {NORMAL, MODDED(U,LALT|LCTL|LSFT)}

#define KC_V    {NORMAL, KEY_V}
#define KC_aV   {NORMAL, MODDED(V,LALT)}
#define KC_cV   {NORMAL, MODDED(V,LCTL)}
#define KC_sV   {NORMAL, MODDED(V,LSFT)}
#define KC_acV  {NORMAL, MODDED(V,LALT|LCTL)}
#define KC_asV  {NORMAL, MODDED(V,LALT|LSFT)}
#define KC_csV  {NORMAL, MODDED(V,LCTL|LSFT)}
#define KC_acsV {NORMAL, MODDED(V,LALT|LCTL|LSFT)}

#define KC_W    {NORMAL, KEY_W}
#define KC_aW   {NORMAL, MODDED(W,LALT)}
#define KC_cW   {NORMAL, MODDED(W,LCTL)}
#define KC_sW   {NORMAL, MODDED(W,LSFT)}
#define KC_acW  {NORMAL, MODDED(W,LALT|LCTL)}
#define KC_asW  {NORMAL, MODDED(W,LALT|LSFT)}
#define KC_csW  {NORMAL, MODDED(W,LCTL|LSFT)}
#define KC_acsW {NORMAL, MODDED(W,LALT|LCTL|LSFT)}

#define KC_X    {NORMAL, KEY_X}
#define KC_aX   {NORMAL, MODDED(X,LALT)}
#define KC_cX   {NORMAL, MODDED(X,LCTL)}
#define KC_sX   {NORMAL, MODDED(X,LSFT)}
#define KC_acX  {NORMAL, MODDED(X,LALT|LCTL)}
#define KC_asX  {NORMAL, MODDED(X,LALT|LSFT)}
#define KC_csX  {NORMAL, MODDED(X,LCTL|LSFT)}
#define KC_acsX {NORMAL, MODDED(X,LALT|LCTL|LSFT)}

#define KC_Y    {NORMAL, KEY_Y}
#define KC_aY   {NORMAL, MODDED(Y,LALT)}
#define KC_cY   {NORMAL, MODDED(Y,LCTL)}
#define KC_sY   {NORMAL, MODDED(Y,LSFT)}
#define KC_acY  {NORMAL, MODDED(Y,LALT|LCTL)}
#define KC_asY  {NORMAL, MODDED(Y,LALT|LSFT)}
#define KC_csY  {NORMAL, MODDED(Y,LCTL|LSFT)}
#define KC_acsY {NORMAL, MODDED(Y,LALT|LCTL|LSFT)}

#define KC_Z    {NORMAL, KEY_Z}
#define KC_aZ   {NORMAL, MODDED(Z,LALT)}
#define KC_cZ   {NORMAL, MODDED(Z,LCTL)}
#define KC_sZ   {NORMAL, MODDED(Z,LSFT)}
#define KC_acZ  {NORMAL, MODDED(Z,LALT|LCTL)}
#define KC_asZ  {NORMAL, MODDED(Z,LALT|LSFT)}
#define KC_csZ  {NORMAL, MODDED(Z,LCTL|LSFT)}
#define KC_acsZ {NORMAL, MODDED(Z,LALT|LCTL|LSFT)}

#define KC_1    {NORMAL, KEY_1}
#define KC_a1   {NORMAL, MODDED(1,LALT)}
#define KC_c1   {NORMAL, MODDED(1,LCTL)}
#define KC_s1   {NORMAL, MODDED(1,LSFT)}
#define KC_ac1  {NORMAL, MODDED(1,LALT|LCTL)}
#define KC_as1  {NORMAL, MODDED(1,LALT|LSFT)}
#define KC_cs1  {NORMAL, MODDED(1,LCTL|LSFT)}
#define KC_acs1 {NORMAL, MODDED(1,LALT|LCTL|LSFT)}

#define KC_2    {NORMAL, KEY_2}
#define KC_a2   {NORMAL, MODDED(2,LALT)}
#define KC_c2   {NORMAL, MODDED(2,LCTL)}
#define KC_s2   {NORMAL, MODDED(2,LSFT)}
#define KC_ac2  {NORMAL, MODDED(2,LALT|LCTL)}
#define KC_as2  {NORMAL, MODDED(2,LALT|LSFT)}
#define KC_cs2  {NORMAL, MODDED(2,LCTL|LSFT)}
#define KC_acs2 {NORMAL, MODDED(2,LALT|LCTL|LSFT)}

#define KC_3    {NORMAL, KEY_3}
#define KC_a3   {NORMAL, MODDED(3,LALT)}
#define KC_c3   {NORMAL, MODDED(3,LCTL)}
#define KC_s3   {NORMAL, MODDED(3,LSFT)}
#define KC_ac3  {NORMAL, MODDED(3,LALT|LCTL)}
#define KC_as3  {NORMAL, MODDED(3,LALT|LSFT)}
#define KC_cs3  {NORMAL, MODDED(3,LCTL|LSFT)}
#define KC_acs3 {NORMAL, MODDED(3,LALT|LCTL|LSFT)}

#define KC_4    {NORMAL, KEY_4}
#define KC_a4   {NORMAL, MODDED(4,LALT)}
#define KC_c4   {NORMAL, MODDED(4,LCTL)}
#define KC_s4   {NORMAL, MODDED(4,LSFT)}
#define KC_ac4  {NORMAL, MODDED(4,LALT|LCTL)}
#define KC_as4  {NORMAL, MODDED(4,LALT|LSFT)}
#define KC_cs4  {NORMAL, MODDED(4,LCTL|LSFT)}
#define KC_acs4 {NORMAL, MODDED(4,LALT|LCTL|LSFT)}

#define KC_5    {NORMAL, KEY_5}
#define KC_a5   {NORMAL, MODDED(5,LALT)}
#define KC_c5   {NORMAL, MODDED(5,LCTL)}
#define KC_s5   {NORMAL, MODDED(5,LSFT)}
#define KC_ac5  {NORMAL, MODDED(5,LALT|LCTL)}
#define KC_as5  {NORMAL, MODDED(5,LALT|LSFT)}
#define KC_cs5  {NORMAL, MODDED(5,LCTL|LSFT)}
#define KC_acs5 {NORMAL, MODDED(5,LALT|LCTL|LSFT)}

#define KC_6    {NORMAL, KEY_6}
#define KC_a6   {NORMAL, MODDED(6,LALT)}
#define KC_c6   {NORMAL, MODDED(6,LCTL)}
#define KC_s6   {NORMAL, MODDED(6,LSFT)}
#define KC_ac6  {NORMAL, MODDED(6,LALT|LCTL)}
#define KC_as6  {NORMAL, MODDED(6,LALT|LSFT)}
#define KC_cs6  {NORMAL, MODDED(6,LCTL|LSFT)}
#define KC_acs6 {NORMAL, MODDED(6,LALT|LCTL|LSFT)}

#define KC_7    {NORMAL, KEY_7}
#define KC_a7   {NORMAL, MODDED(7,LALT)}
#define KC_c7   {NORMAL, MODDED(7,LCTL)}
#define KC_s7   {NORMAL, MODDED(7,LSFT)}
#define KC_ac7  {NORMAL, MODDED(7,LALT|LCTL)}
#define KC_as7  {NORMAL, MODDED(7,LALT|LSFT)}
#define KC_cs7  {NORMAL, MODDED(7,LCTL|LSFT)}
#define KC_acs7 {NORMAL, MODDED(7,LALT|LCTL|LSFT)}

#define KC_8    {NORMAL, KEY_8}
#define KC_a8   {NORMAL, MODDED(8,LALT)}
#define KC_c8   {NORMAL, MODDED(8,LCTL)}
#define KC_s8   {NORMAL, MODDED(8,LSFT)}
#define KC_ac8  {NORMAL, MODDED(8,LALT|LCTL)}
#define KC_as8  {NORMAL, MODDED(8,LALT|LSFT)}
#define KC_cs8  {NORMAL, MODDED(8,LCTL|LSFT)}
#define KC_acs8 {NORMAL, MODDED(8,LALT|LCTL|LSFT)}

#define KC_9    {NORMAL, KEY_9}
#define KC_a9   {NORMAL, MODDED(9,LALT)}
#define KC_c9   {NORMAL, MODDED(9,LCTL)}
#define KC_s9   {NORMAL, MODDED(9,LSFT)}
#define KC_ac9  {NORMAL, MODDED(9,LALT|LCTL)}
#define KC_as9  {NORMAL, MODDED(9,LALT|LSFT)}
#define KC_cs9  {NORMAL, MODDED(9,LCTL|LSFT)}
#define KC_acs9 {NORMAL, MODDED(9,LALT|LCTL|LSFT)}

#define KC_0    {NORMAL, KEY_0}
#define KC_a0   {NORMAL, MODDED(0,LALT)}
#define KC_c0   {NORMAL, MODDED(0,LCTL)}
#define KC_s0   {NORMAL, MODDED(0,LSFT)}
#define KC_ac0  {NORMAL, MODDED(0,LALT|LCTL)}
#define KC_as0  {NORMAL, MODDED(0,LALT|LSFT)}
#define KC_cs0  {NORMAL, MODDED(0,LCTL|LSFT)}
#define KC_acs0 {NORMAL, MODDED(0,LALT|LCTL|LSFT)}

#define KC_ENT     {NORMAL, KEY_ENTER}
#define KC_aENT    {NORMAL, MODDED(ENTER,LALT)}
#define KC_cENT    {NORMAL, MODDED(ENTER,LCTL)}
#define KC_sENT    {NORMAL, MODDED(ENTER,LSFT)}
#define KC_asENT   {NORMAL, MODDED(ENTER,LALT|LSFT)}
#define KC_acENT   {NORMAL, MODDED(ENTER,LALT|LCTL)}
#define KC_csENT   {NORMAL, MODDED(ENTER,LCTL|LSFT)}
#define KC_acsENT  {NORMAL, MODDED(ENTER,LALT|LCTL|LSFT)}

#define KC_ESC  {NORMAL, KEY_ESCAPE}
#define KC_aESC    {NORMAL, MODDED(ESCAPE,LALT)}
#define KC_cESC    {NORMAL, MODDED(ESCAPE,LCTL)}
#define KC_sESC    {NORMAL, MODDED(ESCAPE,LSFT)}
#define KC_acESC   {NORMAL, MODDED(ESCAPE,LALT|LCTL)}
#define KC_asESC   {NORMAL, MODDED(ESCAPE,LALT|LSFT)}
#define KC_scESC   {NORMAL, MODDED(ESCAPE,LSFT|LCTL)}
#define KC_acsESC  {NORMAL, MODDED(ESCAPE,LALT|LCTL|LSFT)}

#define KC_BSPC {NORMAL, KEY_BSPACE}
#define KC_aBSPC   {NORMAL, MODDED(BSPACE,LALT)}
#define KC_cBSPC   {NORMAL, MODDED(BSPACE,LCTL)}
#define KC_sBSPC   {NORMAL, MODDED(BSPACE,LSFT)}
#define KC_acBSPC  {NORMAL, MODDED(BSPACE,LALT|LCTL)}
#define KC_asBSPC  {NORMAL, MODDED(BSPACE,LALT|LSFT)}
#define KC_scBSPC  {NORMAL, MODDED(BSPACE,LSFT|LCTL)}
#define KC_acsBSPC {NORMAL, MODDED(BSPACE,LALT|LCTL|LSFT)}

#define KC_TAB  {NORMAL, KEY_TAB}
#define KC_aTAB    {NORMAL, MODDED(TAB,LALT)}
#define KC_cTAB    {NORMAL, MODDED(TAB,LCTL)}
#define KC_sTAB    {NORMAL, MODDED(TAB,LSFT)}
#define KC_acTAB   {NORMAL, MODDED(TAB,LALT|LCTL)}
#define KC_asTAB   {NORMAL, MODDED(TAB,LALT|LSFT)}
#define KC_scTAB   {NORMAL, MODDED(TAB,LSFT|LCTL)}
#define KC_acsTAB  {NORMAL, MODDED(TAB,LALT|LCTL|LSFT)}

#define KC_SPC  {NORMAL, KEY_SPACE}
#define KC_aSPC    {NORMAL, MODDED(SPACE,LALT)}
#define KC_cSPC    {NORMAL, MODDED(SPACE,LCTL)}
#define KC_sSPC    {NORMAL, MODDED(SPACE,LSFT)}
#define KC_acSPC   {NORMAL, MODDED(SPACE,LALT|LCTL)}
#define KC_asSPC   {NORMAL, MODDED(SPACE,LALT|LSFT)}
#define KC_scSPC   {NORMAL, MODDED(SPACE,LSFT|LCTL)}
#define KC_acsSPC  {NORMAL, MODDED(SPACE,LALT|LCTL|LSFT)}

#define KC_MINS {NORMAL, KEY_MINUS}
#define KC_aMINS   {NORMAL, MODDED(MINUS,LALT)}
#define KC_cMINS   {NORMAL, MODDED(MINUS,LCTL)}
#define KC_sMINS   {NORMAL, MODDED(MINUS,LSFT)}
#define KC_acMINS  {NORMAL, MODDED(MINUS,LALT|LCTL)}
#define KC_asMINS  {NORMAL, MODDED(MINUS,LALT|LSFT)}
#define KC_scMINS  {NORMAL, MODDED(MINUS,LSFT|LCTL)}
#define KC_acsMINS {NORMAL, MODDED(MINUS,LALT|LCTL|LSFT)}

#define KC_EQL  {NORMAL, KEY_EQUAL}
#define KC_aEQL    {NORMAL, MODDED(EQUAL,LALT)}
#define KC_cEQL    {NORMAL, MODDED(EQUAL,LCTL)}
#define KC_sEQL    {NORMAL, MODDED(EQUAL,LSFT)}
#define KC_acEQL   {NORMAL, MODDED(EQUAL,LALT|LCTL)}
#define KC_asEQL   {NORMAL, MODDED(EQUAL,LALT|LSFT)}
#define KC_scEQL   {NORMAL, MODDED(EQUAL,LSFT|LCTL)}
#define KC_acsEQL  {NORMAL, MODDED(EQUAL,LALT|LCTL|LSFT)}

#define KC_LBRC {NORMAL, KEY_LBRACKET}
#define KC_aLBRC   {NORMAL, MODDED(LBRACKET,LALT)}
#define KC_cLBRC   {NORMAL, MODDED(LBRACKET,LCTL)}
#define KC_sLBRC   {NORMAL, MODDED(LBRACKET,LSFT)}
#define KC_acLBRC  {NORMAL, MODDED(LBRACKET,LALT|LCTL)}
#define KC_asLBRC  {NORMAL, MODDED(LBRACKET,LALT|LSFT)}
#define KC_scLBRC  {NORMAL, MODDED(LBRACKET,LSFT|LCTL)}
#define KC_acsLBRC {NORMAL, MODDED(LBRACKET,LALT|LCTL|LSFT)}

#define KC_RBRC {NORMAL, KEY_RBRACKET}
#define KC_aRBRC   {NORMAL, MODDED(RBRACKET,LALT)}
#define KC_cRBRC   {NORMAL, MODDED(RBRACKET,LCTL)}
#define KC_sRBRC   {NORMAL, MODDED(RBRACKET,LSFT)}
#define KC_acRBRC  {NORMAL, MODDED(RBRACKET,LALT|LCTL)}
#define KC_asRBRC  {NORMAL, MODDED(RBRACKET,LALT|LSFT)}
#define KC_scRBRC  {NORMAL, MODDED(RBRACKET,LSFT|LCTL)}
#define KC_acsRBRC {NORMAL, MODDED(RBRACKET,LALT|LCTL|LSFT)}

#define KC_BSLS {NORMAL, KEY_BSLASH}
#define KC_aBSLS   {NORMAL, MODDED(BSLASH,LALT)}
#define KC_cBSLS   {NORMAL, MODDED(BSLASH,LCTL)}
#define KC_sBSLS   {NORMAL, MODDED(BSLASH,LSFT)}
#define KC_acBSLS  {NORMAL, MODDED(BSLASH,LALT|LCTL)}
#define KC_asBSLS  {NORMAL, MODDED(BSLASH,LALT|LSFT)}
#define KC_scBSLS  {NORMAL, MODDED(BSLASH,LSFT|LCTL)}
#define KC_acsBSLS {NORMAL, MODDED(BSLASH,LALT|LCTL|LSFT)}

#define KC_NUHS {NORMAL, KEY_NONUS_HASH}
#define KC_aNUHS   {NORMAL, MODDED(NONUS_HASH,LALT)}
#define KC_cNUHS   {NORMAL, MODDED(NONUS_HASH,LCTL)}
#define KC_sNUHS   {NORMAL, MODDED(NONUS_HASH,LSFT)}
#define KC_acNUHS  {NORMAL, MODDED(NONUS_HASH,LALT|LCTL)}
#define KC_asNUHS  {NORMAL, MODDED(NONUS_HASH,LALT|LSFT)}
#define KC_scNUHS  {NORMAL, MODDED(NONUS_HASH,LSFT|LCTL)}
#define KC_acsNUHS {NORMAL, MODDED(NONUS_HASH,LALT|LCTL|LSFT)}

#define KC_SCLN {NORMAL, KEY_SCOLON}
#define KC_aSCLN   {NORMAL, MODDED(SCOLON,LALT)}
#define KC_cSCLN   {NORMAL, MODDED(SCOLON,LCTL)}
#define KC_sSCLN   {NORMAL, MODDED(SCOLON,LSFT)}
#define KC_acSCLN  {NORMAL, MODDED(SCOLON,LALT|LCTL)}
#define KC_asSCLN  {NORMAL, MODDED(SCOLON,LALT|LSFT)}
#define KC_scSCLN  {NORMAL, MODDED(SCOLON,LSFT|LCTL)}
#define KC_acsSCLN {NORMAL, MODDED(SCOLON,LALT|LCTL|LSFT)}

#define KC_QUOT {NORMAL, KEY_QUOTE}
#define KC_aQUOT   {NORMAL, MODDED(QUOTE,LALT)}
#define KC_cQUOT   {NORMAL, MODDED(QUOTE,LCTL)}
#define KC_sQUOT   {NORMAL, MODDED(QUOTE,LSFT)}
#define KC_acQUOT  {NORMAL, MODDED(QUOTE,LALT|LCTL)}
#define KC_asQUOT  {NORMAL, MODDED(QUOTE,LALT|LSFT)}
#define KC_scQUOT  {NORMAL, MODDED(QUOTE,LSFT|LCTL)}
#define KC_acsQUOT {NORMAL, MODDED(QUOTE,LALT|LCTL|LSFT)}

#define KC_GRV  {NORMAL, KEY_GRAVE}
#define KC_aGRV    {NORMAL, MODDED(GRAVE,LALT)}
#define KC_cGRV    {NORMAL, MODDED(GRAVE,LCTL)}
#define KC_sGRV    {NORMAL, MODDED(GRAVE,LSFT)}
#define KC_acGRV   {NORMAL, MODDED(GRAVE,LALT|LCTL)}
#define KC_asGRV   {NORMAL, MODDED(GRAVE,LALT|LSFT)}
#define KC_scGRV   {NORMAL, MODDED(GRAVE,LSFT|LCTL)}
#define KC_acsGRV  {NORMAL, MODDED(GRAVE,LALT|LCTL|LSFT)}

#define KC_COMM {NORMAL, KEY_COMMA}
#define KC_aCOMM   {NORMAL, MODDED(COMMA,LALT)}
#define KC_cCOMM   {NORMAL, MODDED(COMMA,LCTL)}
#define KC_sCOMM   {NORMAL, MODDED(COMMA,LSFT)}
#define KC_acCOMM  {NORMAL, MODDED(COMMA,LALT|LCTL)}
#define KC_asCOMM  {NORMAL, MODDED(COMMA,LALT|LSFT)}
#define KC_scCOMM  {NORMAL, MODDED(COMMA,LSFT|LCTL)}
#define KC_acsCOMM {NORMAL, MODDED(COMMA,LALT|LCTL|LSFT)}

#define KC_DOT  {NORMAL, KEY_DOT}
#define KC_aDOT    {NORMAL, MODDED(DOT,LALT)}
#define KC_cDOT    {NORMAL, MODDED(DOT,LCTL)}
#define KC_sDOT    {NORMAL, MODDED(DOT,LSFT)}
#define KC_acDOT   {NORMAL, MODDED(DOT,LALT|LCTL)}
#define KC_asDOT   {NORMAL, MODDED(DOT,LALT|LSFT)}
#define KC_scDOT   {NORMAL, MODDED(DOT,LSFT|LCTL)}
#define KC_acsDOT  {NORMAL, MODDED(DOT,LALT|LCTL|LSFT)}

#define KC_SLSH {NORMAL, KEY_SLASH}
#define KC_aSLSH   {NORMAL, MODDED(SLASH,LALT)}
#define KC_cSLSH   {NORMAL, MODDED(SLASH,LCTL)}
#define KC_sSLSH   {NORMAL, MODDED(SLASH,LSFT)}
#define KC_acSLSH  {NORMAL, MODDED(SLASH,LALT|LCTL)}
#define KC_asSLSH  {NORMAL, MODDED(SLASH,LALT|LSFT)}
#define KC_scSLSH  {NORMAL, MODDED(SLASH,LSFT|LCTL)}
#define KC_acsSLSH {NORMAL, MODDED(SLASH,LALT|LCTL|LSFT)}

#define KC_CAPS {NORMAL, KEY_CAPSLOCK}
#define KC_aCAPS   {NORMAL, MODDED(CAPSLOCK,LALT)}
#define KC_cCAPS   {NORMAL, MODDED(CAPSLOCK,LCTL)}
#define KC_sCAPS   {NORMAL, MODDED(CAPSLOCK,LSFT)}
#define KC_acCAPS  {NORMAL, MODDED(CAPSLOCK,LALT|LCTL)}
#define KC_asCAPS  {NORMAL, MODDED(CAPSLOCK,LALT|LSFT)}
#define KC_scCAPS  {NORMAL, MODDED(CAPSLOCK,LSFT|LCTL)}
#define KC_acsCAPS {NORMAL, MODDED(CAPSLOCK,LALT|LCTL|LSFT)}

#define KC_F1   {NORMAL, KEY_F1}
#define KC_aF1     {NORMAL, MODDED(F1,LALT)}
#define KC_cF1     {NORMAL, MODDED(F1,LCTL)}
#define KC_sF1     {NORMAL, MODDED(F1,LSFT)}
#define KC_acF1    {NORMAL, MODDED(F1,LALT|LCTL)}
#define KC_asF1    {NORMAL, MODDED(F1,LALT|LSFT)}
#define KC_scF1    {NORMAL, MODDED(F1,LSFT|LCTL)}
#define KC_acsF1   {NORMAL, MODDED(F1,LALT|LCTL|LSFT)}

#define KC_F2   {NORMAL, KEY_F2}
#define KC_aF2     {NORMAL, MODDED(F2,LALT)}
#define KC_cF2     {NORMAL, MODDED(F2,LCTL)}
#define KC_sF2     {NORMAL, MODDED(F2,LSFT)}
#define KC_acF2    {NORMAL, MODDED(F2,LALT|LCTL)}
#define KC_asF2    {NORMAL, MODDED(F2,LALT|LSFT)}
#define KC_scF2    {NORMAL, MODDED(F2,LSFT|LCTL)}
#define KC_acsF2   {NORMAL, MODDED(F2,LALT|LCTL|LSFT)}

#define KC_F3   {NORMAL, KEY_F3}
#define KC_aF3     {NORMAL, MODDED(F3,LALT)}
#define KC_cF3     {NORMAL, MODDED(F3,LCTL)}
#define KC_sF3     {NORMAL, MODDED(F3,LSFT)}
#define KC_acF3    {NORMAL, MODDED(F3,LALT|LCTL)}
#define KC_asF3    {NORMAL, MODDED(F3,LALT|LSFT)}
#define KC_scF3    {NORMAL, MODDED(F3,LSFT|LCTL)}
#define KC_acsF3   {NORMAL, MODDED(F3,LALT|LCTL|LSFT)}

#define KC_F4   {NORMAL, KEY_F4}
#define KC_aF4     {NORMAL, MODDED(F4,LALT)}
#define KC_cF4     {NORMAL, MODDED(F4,LCTL)}
#define KC_sF4     {NORMAL, MODDED(F4,LSFT)}
#define KC_acF4    {NORMAL, MODDED(F4,LALT|LCTL)}
#define KC_asF4    {NORMAL, MODDED(F4,LALT|LSFT)}
#define KC_scF4    {NORMAL, MODDED(F4,LSFT|LCTL)}
#define KC_acsF4   {NORMAL, MODDED(F4,LALT|LCTL|LSFT)}

#define KC_F5   {NORMAL, KEY_F5}
#define KC_aF5     {NORMAL, MODDED(F5,LALT)}
#define KC_cF5     {NORMAL, MODDED(F5,LCTL)}
#define KC_sF5     {NORMAL, MODDED(F5,LSFT)}
#define KC_acF5    {NORMAL, MODDED(F5,LALT|LCTL)}
#define KC_asF5    {NORMAL, MODDED(F5,LALT|LSFT)}
#define KC_scF5    {NORMAL, MODDED(F5,LSFT|LCTL)}
#define KC_acsF5   {NORMAL, MODDED(F5,LALT|LCTL|LSFT)}

#define KC_F6   {NORMAL, KEY_F6}
#define KC_aF6     {NORMAL, MODDED(F6,LALT)}
#define KC_cF6     {NORMAL, MODDED(F6,LCTL)}
#define KC_sF6     {NORMAL, MODDED(F6,LSFT)}
#define KC_acF6    {NORMAL, MODDED(F6,LALT|LCTL)}
#define KC_asF6    {NORMAL, MODDED(F6,LALT|LSFT)}
#define KC_scF6    {NORMAL, MODDED(F6,LSFT|LCTL)}
#define KC_acsF6   {NORMAL, MODDED(F6,LALT|LCTL|LSFT)}

#define KC_F7   {NORMAL, KEY_F7}
#define KC_aF7     {NORMAL, MODDED(F7,LALT)}
#define KC_cF7     {NORMAL, MODDED(F7,LCTL)}
#define KC_sF7     {NORMAL, MODDED(F7,LSFT)}
#define KC_acF7    {NORMAL, MODDED(F7,LALT|LCTL)}
#define KC_asF7    {NORMAL, MODDED(F7,LALT|LSFT)}
#define KC_scF7    {NORMAL, MODDED(F7,LSFT|LCTL)}
#define KC_acsF7   {NORMAL, MODDED(F7,LALT|LCTL|LSFT)}

#define KC_F8   {NORMAL, KEY_F8}
#define KC_aF8     {NORMAL, MODDED(F8,LALT)}
#define KC_cF8     {NORMAL, MODDED(F8,LCTL)}
#define KC_sF8     {NORMAL, MODDED(F8,LSFT)}
#define KC_acF8    {NORMAL, MODDED(F8,LALT|LCTL)}
#define KC_asF8    {NORMAL, MODDED(F8,LALT|LSFT)}
#define KC_scF8    {NORMAL, MODDED(F8,LSFT|LCTL)}
#define KC_acsF8   {NORMAL, MODDED(F8,LALT|LCTL|LSFT)}

#define KC_F9   {NORMAL, KEY_F9}
#define KC_aF9     {NORMAL, MODDED(F9,LALT)}
#define KC_cF9     {NORMAL, MODDED(F9,LCTL)}
#define KC_sF9     {NORMAL, MODDED(F9,LSFT)}
#define KC_acF9    {NORMAL, MODDED(F9,LALT|LCTL)}
#define KC_asF9    {NORMAL, MODDED(F9,LALT|LSFT)}
#define KC_scF9    {NORMAL, MODDED(F9,LSFT|LCTL)}
#define KC_acsF9   {NORMAL, MODDED(F9,LALT|LCTL|LSFT)}

#define KC_F10  {NORMAL, KEY_F10}
#define KC_aF10    {NORMAL, MODDED(F10,LALT)}
#define KC_cF10    {NORMAL, MODDED(F10,LCTL)}
#define KC_sF10    {NORMAL, MODDED(F10,LSFT)}
#define KC_acF10   {NORMAL, MODDED(F10,LALT|LCTL)}
#define KC_asF10   {NORMAL, MODDED(F10,LALT|LSFT)}
#define KC_scF10   {NORMAL, MODDED(F10,LSFT|LCTL)}
#define KC_acsF10  {NORMAL, MODDED(F10,LALT|LCTL|LSFT)}

#define KC_F11  {NORMAL, KEY_F11}
#define KC_aF11    {NORMAL, MODDED(F11,LALT)}
#define KC_cF11    {NORMAL, MODDED(F11,LCTL)}
#define KC_sF11    {NORMAL, MODDED(F11,LSFT)}
#define KC_acF11   {NORMAL, MODDED(F11,LALT|LCTL)}
#define KC_asF11   {NORMAL, MODDED(F11,LALT|LSFT)}
#define KC_scF11   {NORMAL, MODDED(F11,LSFT|LCTL)}
#define KC_acsF11  {NORMAL, MODDED(F11,LALT|LCTL|LSFT)}

#define KC_F12  {NORMAL, KEY_F12}
#define KC_aF12    {NORMAL, MODDED(F12,LALT)}
#define KC_cF12    {NORMAL, MODDED(F12,LCTL)}
#define KC_sF12    {NORMAL, MODDED(F12,LSFT)}
#define KC_acF12   {NORMAL, MODDED(F12,LALT|LCTL)}
#define KC_asF12   {NORMAL, MODDED(F12,LALT|LSFT)}
#define KC_scF12   {NORMAL, MODDED(F12,LSFT|LCTL)}
#define KC_acsF12  {NORMAL, MODDED(F12,LALT|LCTL|LSFT)}

#define KC_PSCR {NORMAL, KEY_PSCREEN}
#define KC_aPSCR   {NORMAL, MODDED(PSCREEN,LALT)}
#define KC_cPSCR   {NORMAL, MODDED(PSCREEN,LCTL)}
#define KC_sPSCR   {NORMAL, MODDED(PSCREEN,LSFT)}
#define KC_acPSCR  {NORMAL, MODDED(PSCREEN,LALT|LCTL)}
#define KC_asPSCR  {NORMAL, MODDED(PSCREEN,LALT|LSFT)}
#define KC_scPSCR  {NORMAL, MODDED(PSCREEN,LSFT|LCTL)}
#define KC_acsPSCR {NORMAL, MODDED(PSCREEN,LALT|LCTL|LSFT)}

#define KC_SLCK {NORMAL, KEY_SCKLOCK}
#define KC_aSLCK   {NORMAL, MODDED(SCKLOCK,LALT)}
#define KC_cSLCK   {NORMAL, MODDED(SCKLOCK,LCTL)}
#define KC_sSLCK   {NORMAL, MODDED(SCKLOCK,LSFT)}
#define KC_acSLCK  {NORMAL, MODDED(SCKLOCK,LALT|LCTL)}
#define KC_asSLCK  {NORMAL, MODDED(SCKLOCK,LALT|LSFT)}
#define KC_scSLCK  {NORMAL, MODDED(SCKLOCK,LSFT|LCTL)}
#define KC_acsSLCK {NORMAL, MODDED(SCKLOCK,LALT|LCTL|LSFT)}

#define KC_PAUS {NORMAL, KEY_PAUSE}
#define KC_aPAUS   {NORMAL, MODDED(PAUSE,LALT)}
#define KC_cPAUS   {NORMAL, MODDED(PAUSE,LCTL)}
#define KC_sPAUS   {NORMAL, MODDED(PAUSE,LSFT)}
#define KC_acPAUS  {NORMAL, MODDED(PAUSE,LALT|LCTL)}
#define KC_asPAUS  {NORMAL, MODDED(PAUSE,LALT|LSFT)}
#define KC_scPAUS  {NORMAL, MODDED(PAUSE,LSFT|LCTL)}
#define KC_acsPAUS {NORMAL, MODDED(PAUSE,LALT|LCTL|LSFT)}

#define KC_INS  {NORMAL, KEY_INSERT}
#define KC_aINS    {NORMAL, MODDED(INSERT,LALT)}
#define KC_cINS    {NORMAL, MODDED(INSERT,LCTL)}
#define KC_sINS    {NORMAL, MODDED(INSERT,LSFT)}
#define KC_acINS   {NORMAL, MODDED(INSERT,LALT|LCTL)}
#define KC_asINS   {NORMAL, MODDED(INSERT,LALT|LSFT)}
#define KC_scINS   {NORMAL, MODDED(INSERT,LSFT|LCTL)}
#define KC_acsINS  {NORMAL, MODDED(INSERT,LALT|LCTL|LSFT)}

#define KC_HOME {NORMAL, KEY_HOME}
#define KC_aHOME   {NORMAL, MODDED(HOME,LALT)}
#define KC_cHOME   {NORMAL, MODDED(HOME,LCTL)}
#define KC_sHOME   {NORMAL, MODDED(HOME,LSFT)}
#define KC_acHOME  {NORMAL, MODDED(HOME,LALT|LCTL)}
#define KC_asHOME  {NORMAL, MODDED(HOME,LALT|LSFT)}
#define KC_scHOME  {NORMAL, MODDED(HOME,LSFT|LCTL)}
#define KC_acsHOME {NORMAL, MODDED(HOME,LALT|LCTL|LSFT)}

#define KC_PGUP {NORMAL, KEY_PGUP}
#define KC_aPGUP   {NORMAL, MODDED(PGUP,LALT)}
#define KC_cPGUP   {NORMAL, MODDED(PGUP,LCTL)}
#define KC_sPGUP   {NORMAL, MODDED(PGUP,LSFT)}
#define KC_acPGUP  {NORMAL, MODDED(PGUP,LALT|LCTL)}
#define KC_asPGUP  {NORMAL, MODDED(PGUP,LALT|LSFT)}
#define KC_scPGUP  {NORMAL, MODDED(PGUP,LSFT|LCTL)}
#define KC_acsPGUP {NORMAL, MODDED(PGUP,LALT|LCTL|LSFT)}

#define KC_DEL  {NORMAL, KEY_DELETE}
#define KC_aDEL    {NORMAL, MODDED(DELETE,LALT)}
#define KC_cDEL    {NORMAL, MODDED(DELETE,LCTL)}
#define KC_sDEL    {NORMAL, MODDED(DELETE,LSFT)}
#define KC_acDEL   {NORMAL, MODDED(DELETE,LALT|LCTL)}
#define KC_asDEL   {NORMAL, MODDED(DELETE,LALT|LSFT)}
#define KC_scDEL   {NORMAL, MODDED(DELETE,LSFT|LCTL)}
#define KC_acsDEL  {NORMAL, MODDED(DELETE,LALT|LCTL|LSFT)}

#define KC_END  {NORMAL, KEY_END}
#define KC_aEND    {NORMAL, MODDED(END,LALT)}
#define KC_cEND    {NORMAL, MODDED(END,LCTL)}
#define KC_sEND    {NORMAL, MODDED(END,LSFT)}
#define KC_acEND   {NORMAL, MODDED(END,LALT|LCTL)}
#define KC_asEND   {NORMAL, MODDED(END,LALT|LSFT)}
#define KC_scEND   {NORMAL, MODDED(END,LSFT|LCTL)}
#define KC_acsEND  {NORMAL, MODDED(END,LALT|LCTL|LSFT)}

#define KC_PGDN {NORMAL, KEY_PGDOWN}
#define KC_aPGDN   {NORMAL, MODDED(PGDOWN,LALT)}
#define KC_cPGDN   {NORMAL, MODDED(PGDOWN,LCTL)}
#define KC_sPGDN   {NORMAL, MODDED(PGDOWN,LSFT)}
#define KC_acPGDN  {NORMAL, MODDED(PGDOWN,LALT|LCTL)}
#define KC_asPGDN  {NORMAL, MODDED(PGDOWN,LALT|LSFT)}
#define KC_scPGDN  {NORMAL, MODDED(PGDOWN,LSFT|LCTL)}
#define KC_acsPGDN {NORMAL, MODDED(PGDOWN,LALT|LCTL|LSFT)}

#define KC_RGHT {NORMAL, KEY_RIGHT}
#define KC_aRGHT   {NORMAL, MODDED(RIGHT,LALT)}
#define KC_cRGHT   {NORMAL, MODDED(RIGHT,LCTL)}
#define KC_sRGHT   {NORMAL, MODDED(RIGHT,LSFT)}
#define KC_acRGHT  {NORMAL, MODDED(RIGHT,LALT|LCTL)}
#define KC_asRGHT  {NORMAL, MODDED(RIGHT,LALT|LSFT)}
#define KC_scRGHT  {NORMAL, MODDED(RIGHT,LSFT|LCTL)}
#define KC_acsRGHT {NORMAL, MODDED(RIGHT,LALT|LCTL|LSFT)}

#define KC_LEFT {NORMAL, KEY_LEFT}
#define KC_aLEFT   {NORMAL, MODDED(LEFT,LALT)}
#define KC_cLEFT   {NORMAL, MODDED(LEFT,LCTL)}
#define KC_sLEFT   {NORMAL, MODDED(LEFT,LSFT)}
#define KC_acLEFT  {NORMAL, MODDED(LEFT,LALT|LCTL)}
#define KC_asLEFT  {NORMAL, MODDED(LEFT,LALT|LSFT)}
#define KC_scLEFT  {NORMAL, MODDED(LEFT,LSFT|LCTL)}
#define KC_acsLEFT {NORMAL, MODDED(LEFT,LALT|LCTL|LSFT)}

#define KC_DOWN {NORMAL, KEY_DOWN}
#define KC_aDOWN   {NORMAL, MODDED(DOWN,LALT)}
#define KC_cDOWN   {NORMAL, MODDED(DOWN,LCTL)}
#define KC_sDOWN   {NORMAL, MODDED(DOWN,LSFT)}
#define KC_acDOWN  {NORMAL, MODDED(DOWN,LALT|LCTL)}
#define KC_asDOWN  {NORMAL, MODDED(DOWN,LALT|LSFT)}
#define KC_scDOWN  {NORMAL, MODDED(DOWN,LSFT|LCTL)}
#define KC_acsDOWN {NORMAL, MODDED(DOWN,LALT|LCTL|LSFT)}

#define KC_UP   {NORMAL, KEY_UP}
#define KC_aUP     {NORMAL, MODDED(UP,LALT)}
#define KC_cUP     {NORMAL, MODDED(UP,LCTL)}
#define KC_sUP     {NORMAL, MODDED(UP,LSFT)}
#define KC_acUP    {NORMAL, MODDED(UP,LALT|LCTL)}
#define KC_asUP    {NORMAL, MODDED(UP,LALT|LSFT)}
#define KC_scUP    {NORMAL, MODDED(UP,LSFT|LCTL)}
#define KC_acsUP   {NORMAL, MODDED(UP,LALT|LCTL|LSFT)}

#define KC_NLCK {NORMAL, KEY_NUMLOCK}
#define KC_aNLCK   {NORMAL, MODDED(NUMLOCK,LALT)}
#define KC_cNLCK   {NORMAL, MODDED(NUMLOCK,LCTL)}
#define KC_sNLCK   {NORMAL, MODDED(NUMLOCK,LSFT)}
#define KC_acNLCK  {NORMAL, MODDED(NUMLOCK,LALT|LCTL)}
#define KC_asNLCK  {NORMAL, MODDED(NUMLOCK,LALT|LSFT)}
#define KC_scNLCK  {NORMAL, MODDED(NUMLOCK,LSFT|LCTL)}
#define KC_acsNLCK {NORMAL, MODDED(NUMLOCK,LALT|LCTL|LSFT)}

#define KC_PSLS {NORMAL, KEY_KP_SLASH}
#define KC_aPSLS   {NORMAL, MODDED(KP_SLASH,LALT)}
#define KC_cPSLS   {NORMAL, MODDED(KP_SLASH,LCTL)}
#define KC_sPSLS   {NORMAL, MODDED(KP_SLASH,LSFT)}
#define KC_acPSLS  {NORMAL, MODDED(KP_SLASH,LALT|LCTL)}
#define KC_asPSLS  {NORMAL, MODDED(KP_SLASH,LALT|LSFT)}
#define KC_scPSLS  {NORMAL, MODDED(KP_SLASH,LSFT|LCTL)}
#define KC_acsPSLS {NORMAL, MODDED(KP_SLASH,LALT|LCTL|LSFT)}

#define KC_PAST {NORMAL, KEY_KP_ASTERISK}
#define KC_aPAST   {NORMAL, MODDED(KP_ASTERISK,LALT)}
#define KC_cPAST   {NORMAL, MODDED(KP_ASTERISK,LCTL)}
#define KC_sPAST   {NORMAL, MODDED(KP_ASTERISK,LSFT)}
#define KC_acPAST  {NORMAL, MODDED(KP_ASTERISK,LALT|LCTL)}
#define KC_asPAST  {NORMAL, MODDED(KP_ASTERISK,LALT|LSFT)}
#define KC_scPAST  {NORMAL, MODDED(KP_ASTERISK,LSFT|LCTL)}
#define KC_acsPAST {NORMAL, MODDED(KP_ASTERISK,LALT|LCTL|LSFT)}

#define KC_PMNS {NORMAL, KEY_KP_MINUS}
#define KC_aPMNS   {NORMAL, MODDED(KP_MINUS,LALT)}
#define KC_cPMNS   {NORMAL, MODDED(KP_MINUS,LCTL)}
#define KC_sPMNS   {NORMAL, MODDED(KP_MINUS,LSFT)}
#define KC_acPMNS  {NORMAL, MODDED(KP_MINUS,LALT|LCTL)}
#define KC_asPMNS  {NORMAL, MODDED(KP_MINUS,LALT|LSFT)}
#define KC_scPMNS  {NORMAL, MODDED(KP_MINUS,LSFT|LCTL)}
#define KC_acsPMNS {NORMAL, MODDED(KP_MINUS,LALT|LCTL|LSFT)}

#define KC_PPLS {NORMAL, KEY_KP_PLUS}
#define KC_aPPLS   {NORMAL, MODDED(KP_PLUS,LALT)}
#define KC_cPPLS   {NORMAL, MODDED(KP_PLUS,LCTL)}
#define KC_sPPLS   {NORMAL, MODDED(KP_PLUS,LSFT)}
#define KC_acPPLS  {NORMAL, MODDED(KP_PLUS,LALT|LCTL)}
#define KC_asPPLS  {NORMAL, MODDED(KP_PLUS,LALT|LSFT)}
#define KC_scPPLS  {NORMAL, MODDED(KP_PLUS,LSFT|LCTL)}
#define KC_acsPPLS {NORMAL, MODDED(KP_PLUS,LALT|LCTL|LSFT)}

#define KC_PENT {NORMAL, KEY_KP_ENTER}
#define KC_aPENT   {NORMAL, MODDED(KP_ENTER,LALT)}
#define KC_cPENT   {NORMAL, MODDED(KP_ENTER,LCTL)}
#define KC_sPENT   {NORMAL, MODDED(KP_ENTER,LSFT)}
#define KC_acPENT  {NORMAL, MODDED(KP_ENTER,LALT|LCTL)}
#define KC_asPENT  {NORMAL, MODDED(KP_ENTER,LALT|LSFT)}
#define KC_scPENT  {NORMAL, MODDED(KP_ENTER,LSFT|LCTL)}
#define KC_acsPENT {NORMAL, MODDED(KP_ENTER,LALT|LCTL|LSFT)}

#define KC_P1   {NORMAL, KEY_KP_1}
#define KC_aP1     {NORMAL, MODDED(KP_1,LALT)}
#define KC_cP1     {NORMAL, MODDED(KP_1,LCTL)}
#define KC_sP1     {NORMAL, MODDED(KP_1,LSFT)}
#define KC_acP1    {NORMAL, MODDED(KP_1,LALT|LCTL)}
#define KC_asP1    {NORMAL, MODDED(KP_1,LALT|LSFT)}
#define KC_scP1    {NORMAL, MODDED(KP_1,LSFT|LCTL)}
#define KC_acsP1   {NORMAL, MODDED(KP_1,LALT|LCTL|LSFT)}

#define KC_P2   {NORMAL, KEY_KP_2}
#define KC_aP2     {NORMAL, MODDED(KP_2,LALT)}
#define KC_cP2     {NORMAL, MODDED(KP_2,LCTL)}
#define KC_sP2     {NORMAL, MODDED(KP_2,LSFT)}
#define KC_acP2    {NORMAL, MODDED(KP_2,LALT|LCTL)}
#define KC_asP2    {NORMAL, MODDED(KP_2,LALT|LSFT)}
#define KC_scP2    {NORMAL, MODDED(KP_2,LSFT|LCTL)}
#define KC_acsP2   {NORMAL, MODDED(KP_2,LALT|LCTL|LSFT)}

#define KC_P3   {NORMAL, KEY_KP_3}
#define KC_aP3     {NORMAL, MODDED(KP_3,LALT)}
#define KC_cP3     {NORMAL, MODDED(KP_3,LCTL)}
#define KC_sP3     {NORMAL, MODDED(KP_3,LSFT)}
#define KC_acP3    {NORMAL, MODDED(KP_3,LALT|LCTL)}
#define KC_asP3    {NORMAL, MODDED(KP_3,LALT|LSFT)}
#define KC_scP3    {NORMAL, MODDED(KP_3,LSFT|LCTL)}
#define KC_acsP3   {NORMAL, MODDED(KP_3,LALT|LCTL|LSFT)}

#define KC_P4   {NORMAL, KEY_KP_4}
#define KC_aP4     {NORMAL, MODDED(KP_4,LALT)}
#define KC_cP4     {NORMAL, MODDED(KP_4,LCTL)}
#define KC_sP4     {NORMAL, MODDED(KP_4,LSFT)}
#define KC_acP4    {NORMAL, MODDED(KP_4,LALT|LCTL)}
#define KC_asP4    {NORMAL, MODDED(KP_4,LALT|LSFT)}
#define KC_scP4    {NORMAL, MODDED(KP_4,LSFT|LCTL)}
#define KC_acsP4   {NORMAL, MODDED(KP_4,LALT|LCTL|LSFT)}

#define KC_P5   {NORMAL, KEY_KP_5}
#define KC_aP5     {NORMAL, MODDED(KP_5,LALT)}
#define KC_cP5     {NORMAL, MODDED(KP_5,LCTL)}
#define KC_sP5     {NORMAL, MODDED(KP_5,LSFT)}
#define KC_acP5    {NORMAL, MODDED(KP_5,LALT|LCTL)}
#define KC_asP5    {NORMAL, MODDED(KP_5,LALT|LSFT)}
#define KC_scP5    {NORMAL, MODDED(KP_5,LSFT|LCTL)}
#define KC_acsP5   {NORMAL, MODDED(KP_5,LALT|LCTL|LSFT)}

#define KC_P6   {NORMAL, KEY_KP_6}
#define KC_aP6     {NORMAL, MODDED(KP_6,LALT)}
#define KC_cP6     {NORMAL, MODDED(KP_6,LCTL)}
#define KC_sP6     {NORMAL, MODDED(KP_6,LSFT)}
#define KC_acP6    {NORMAL, MODDED(KP_6,LALT|LCTL)}
#define KC_asP6    {NORMAL, MODDED(KP_6,LALT|LSFT)}
#define KC_scP6    {NORMAL, MODDED(KP_6,LSFT|LCTL)}
#define KC_acsP6   {NORMAL, MODDED(KP_6,LALT|LCTL|LSFT)}

#define KC_P7   {NORMAL, KEY_KP_7}
#define KC_aP7     {NORMAL, MODDED(KP_7,LALT)}
#define KC_cP7     {NORMAL, MODDED(KP_7,LCTL)}
#define KC_sP7     {NORMAL, MODDED(KP_7,LSFT)}
#define KC_acP7    {NORMAL, MODDED(KP_7,LALT|LCTL)}
#define KC_asP7    {NORMAL, MODDED(KP_7,LALT|LSFT)}
#define KC_scP7    {NORMAL, MODDED(KP_7,LSFT|LCTL)}
#define KC_acsP7   {NORMAL, MODDED(KP_7,LALT|LCTL|LSFT)}

#define KC_P8   {NORMAL, KEY_KP_8}
#define KC_aP8     {NORMAL, MODDED(KP_8,LALT)}
#define KC_cP8     {NORMAL, MODDED(KP_8,LCTL)}
#define KC_sP8     {NORMAL, MODDED(KP_8,LSFT)}
#define KC_acP8    {NORMAL, MODDED(KP_8,LALT|LCTL)}
#define KC_asP8    {NORMAL, MODDED(KP_8,LALT|LSFT)}
#define KC_scP8    {NORMAL, MODDED(KP_8,LSFT|LCTL)}
#define KC_acsP8   {NORMAL, MODDED(KP_8,LALT|LCTL|LSFT)}

#define KC_P9   {NORMAL, KEY_KP_9}
#define KC_aP9     {NORMAL, MODDED(KP_9,LALT)}
#define KC_cP9     {NORMAL, MODDED(KP_9,LCTL)}
#define KC_sP9     {NORMAL, MODDED(KP_9,LSFT)}
#define KC_acP9    {NORMAL, MODDED(KP_9,LALT|LCTL)}
#define KC_asP9    {NORMAL, MODDED(KP_9,LALT|LSFT)}
#define KC_scP9    {NORMAL, MODDED(KP_9,LSFT|LCTL)}
#define KC_acsP9   {NORMAL, MODDED(KP_9,LALT|LCTL|LSFT)}

#define KC_P0   {NORMAL, KEY_KP_0}
#define KC_aP0     {NORMAL, MODDED(KP_0,LALT)}
#define KC_cP0     {NORMAL, MODDED(KP_0,LCTL)}
#define KC_sP0     {NORMAL, MODDED(KP_0,LSFT)}
#define KC_acP0    {NORMAL, MODDED(KP_0,LALT|LCTL)}
#define KC_asP0    {NORMAL, MODDED(KP_0,LALT|LSFT)}
#define KC_scP0    {NORMAL, MODDED(KP_0,LSFT|LCTL)}
#define KC_acsP0   {NORMAL, MODDED(KP_0,LALT|LCTL|LSFT)}

#define KC_PDOT {NORMAL, KEY_KP_DOT}
#define KC_aPDOT   {NORMAL, MODDED(KP_DOT,LALT)}
#define KC_cPDOT   {NORMAL, MODDED(KP_DOT,LCTL)}
#define KC_sPDOT   {NORMAL, MODDED(KP_DOT,LSFT)}
#define KC_acPDOT  {NORMAL, MODDED(KP_DOT,LALT|LCTL)}
#define KC_asPDOT  {NORMAL, MODDED(KP_DOT,LALT|LSFT)}
#define KC_scPDOT  {NORMAL, MODDED(KP_DOT,LSFT|LCTL)}
#define KC_acsPDOT {NORMAL, MODDED(KP_DOT,LALT|LCTL|LSFT)}

#define KC_NUBS {NORMAL, KEY_NONUS_BSLASH}
#define KC_aNUBS   {NORMAL, MODDED(NONUS_BSLASH,LALT)}
#define KC_cNUBS   {NORMAL, MODDED(NONUS_BSLASH,LCTL)}
#define KC_sNUBS   {NORMAL, MODDED(NONUS_BSLASH,LSFT)}
#define KC_acNUBS  {NORMAL, MODDED(NONUS_BSLASH,LALT|LCTL)}
#define KC_asNUBS  {NORMAL, MODDED(NONUS_BSLASH,LALT|LSFT)}
#define KC_scNUBS  {NORMAL, MODDED(NONUS_BSLASH,LSFT|LCTL)}
#define KC_acsNUBS {NORMAL, MODDED(NONUS_BSLASH,LALT|LCTL|LSFT)}

#define KC_APP  {NORMAL, KEY_APPLICATION}
#define KC_aAPP    {NORMAL, MODDED(APPLICATION,LALT)}
#define KC_cAPP    {NORMAL, MODDED(APPLICATION,LCTL)}
#define KC_sAPP    {NORMAL, MODDED(APPLICATION,LSFT)}
#define KC_acAPP   {NORMAL, MODDED(APPLICATION,LALT|LCTL)}
#define KC_asAPP   {NORMAL, MODDED(APPLICATION,LALT|LSFT)}
#define KC_scAPP   {NORMAL, MODDED(APPLICATION,LSFT|LCTL)}
#define KC_acsAPP  {NORMAL, MODDED(APPLICATION,LALT|LCTL|LSFT)}

#define KC_PEQL {NORMAL, KEY_KP_EQUAL}
#define KC_aPEQL   {NORMAL, MODDED(KP_EQUAL,LALT)}
#define KC_cPEQL   {NORMAL, MODDED(KP_EQUAL,LCTL)}
#define KC_sPEQL   {NORMAL, MODDED(KP_EQUAL,LSFT)}
#define KC_acPEQL  {NORMAL, MODDED(KP_EQUAL,LALT|LCTL)}
#define KC_asPEQL  {NORMAL, MODDED(KP_EQUAL,LALT|LSFT)}
#define KC_scPEQL  {NORMAL, MODDED(KP_EQUAL,LSFT|LCTL)}
#define KC_acsPEQL {NORMAL, MODDED(KP_EQUAL,LALT|LCTL|LSFT)}

#define KC_PCMM {NORMAL, KEY_KP_COMMA}
#define KC_aPCMM   {NORMAL, MODDED(KP_COMMA,LALT)}
#define KC_cPCMM   {NORMAL, MODDED(KP_COMMA,LCTL)}
#define KC_sPCMM   {NORMAL, MODDED(KP_COMMA,LSFT)}
#define KC_acPCMM  {NORMAL, MODDED(KP_COMMA,LALT|LCTL)}
#define KC_asPCMM  {NORMAL, MODDED(KP_COMMA,LALT|LSFT)}
#define KC_scPCMM  {NORMAL, MODDED(KP_COMMA,LSFT|LCTL)}
#define KC_acsPCMM {NORMAL, MODDED(KP_COMMA,LALT|LCTL|LSFT)}

#define KC_BRK  {NORMAL, KEY_PAUSE}
#define KC_aBRK    {NORMAL, MODDED(PAUSE,LALT)}
#define KC_cBRK    {NORMAL, MODDED(PAUSE,LCTL)}
#define KC_sBRK    {NORMAL, MODDED(PAUSE,LSFT)}
#define KC_acBRK   {NORMAL, MODDED(PAUSE,LALT|LCTL)}
#define KC_asBRK   {NORMAL, MODDED(PAUSE,LALT|LSFT)}
#define KC_scBRK   {NORMAL, MODDED(PAUSE,LSFT|LCTL)}
#define KC_acsBRK  {NORMAL, MODDED(PAUSE,LALT|LCTL|LSFT)}

#define KC_ERAS {NORMAL, KEY_ALT_ERASE}
#define KC_aERAS   {NORMAL, MODDED(ALT_ERASE,LALT)}
#define KC_cERAS   {NORMAL, MODDED(ALT_ERASE,LCTL)}
#define KC_sERAS   {NORMAL, MODDED(ALT_ERASE,LSFT)}
#define KC_acERAS  {NORMAL, MODDED(ALT_ERASE,LALT|LCTL)}
#define KC_asERAS  {NORMAL, MODDED(ALT_ERASE,LALT|LSFT)}
#define KC_scERAS  {NORMAL, MODDED(ALT_ERASE,LSFT|LCTL)}
#define KC_acsERAS {NORMAL, MODDED(ALT_ERASE,LALT|LCTL|LSFT)}

#define KC_CLR  {NORMAL, KEY_CLEAR}
#define KC_aCLR    {NORMAL, MODDED(CLEAR,LALT)}
#define KC_cCLR    {NORMAL, MODDED(CLEAR,LCTL)}
#define KC_sCLR    {NORMAL, MODDED(CLEAR,LSFT)}
#define KC_acCLR   {NORMAL, MODDED(CLEAR,LALT|LCTL)}
#define KC_asCLR   {NORMAL, MODDED(CLEAR,LALT|LSFT)}
#define KC_scCLR   {NORMAL, MODDED(CLEAR,LSFT|LCTL)}
#define KC_acsCLR  {NORMAL, MODDED(CLEAR,LALT|LCTL|LSFT)}

/* Japanese specific */
#define KC_ZKHK {NORMAL, KEY_GRAVE}
#define KC_aZKHK   {NORMAL, MODDED(GRAVE,LALT)}
#define KC_cZKHK   {NORMAL, MODDED(GRAVE,LCTL)}
#define KC_sZKHK   {NORMAL, MODDED(GRAVE,LSFT)}
#define KC_acZKHK  {NORMAL, MODDED(GRAVE,LALT|LCTL)}
#define KC_asZKHK  {NORMAL, MODDED(GRAVE,LALT|LSFT)}
#define KC_scZKHK  {NORMAL, MODDED(GRAVE,LSFT|LCTL)}
#define KC_acsZKHK {NORMAL, MODDED(GRAVE,LALT|LCTL|LSFT)}

#define KC_RO   {NORMAL, KEY_INT1}
#define KC_aRO     {NORMAL, MODDED(INT1,LALT)}
#define KC_cRO     {NORMAL, MODDED(INT1,LCTL)}
#define KC_sRO     {NORMAL, MODDED(INT1,LSFT)}
#define KC_acRO    {NORMAL, MODDED(INT1,LALT|LCTL)}
#define KC_asRO    {NORMAL, MODDED(INT1,LALT|LSFT)}
#define KC_scRO    {NORMAL, MODDED(INT1,LSFT|LCTL)}
#define KC_acsRO   {NORMAL, MODDED(INT1,LALT|LCTL|LSFT)}

#define KC_KANA {NORMAL, KEY_INT2}
#define KC_aKANA   {NORMAL, MODDED(INT2,LALT)}
#define KC_cKANA   {NORMAL, MODDED(INT2,LCTL)}
#define KC_sKANA   {NORMAL, MODDED(INT2,LSFT)}
#define KC_acKANA  {NORMAL, MODDED(INT2,LALT|LCTL)}
#define KC_asKANA  {NORMAL, MODDED(INT2,LALT|LSFT)}
#define KC_scKANA  {NORMAL, MODDED(INT2,LSFT|LCTL)}
#define KC_acsKANA {NORMAL, MODDED(INT2,LALT|LCTL|LSFT)}

#define KC_JYEN {NORMAL, KEY_INT3}
#define KC_aJYEN   {NORMAL, MODDED(INT3,LALT)}
#define KC_cJYEN   {NORMAL, MODDED(INT3,LCTL)}
#define KC_sJYEN   {NORMAL, MODDED(INT3,LSFT)}
#define KC_acJYEN  {NORMAL, MODDED(INT3,LALT|LCTL)}
#define KC_asJYEN  {NORMAL, MODDED(INT3,LALT|LSFT)}
#define KC_scJYEN  {NORMAL, MODDED(INT3,LSFT|LCTL)}
#define KC_acsJYEN {NORMAL, MODDED(INT3,LALT|LCTL|LSFT)}

#define KC_HENK {NORMAL, KEY_INT4}
#define KC_aHENK   {NORMAL, MODDED(INT4,LALT)}
#define KC_cHENK   {NORMAL, MODDED(INT4,LCTL)}
#define KC_sHENK   {NORMAL, MODDED(INT4,LSFT)}
#define KC_acHENK  {NORMAL, MODDED(INT4,LALT|LCTL)}
#define KC_asHENK  {NORMAL, MODDED(INT4,LALT|LSFT)}
#define KC_scHENK  {NORMAL, MODDED(INT4,LSFT|LCTL)}
#define KC_acsHENK {NORMAL, MODDED(INT4,LALT|LCTL|LSFT)}

#define KC_MHEN {NORMAL, KEY_INT5}
#define KC_aMHEN   {NORMAL, MODDED(INT5,LALT)}
#define KC_cMHEN   {NORMAL, MODDED(INT5,LCTL)}
#define KC_sMHEN   {NORMAL, MODDED(INT5,LSFT)}
#define KC_acMHEN  {NORMAL, MODDED(INT5,LALT|LCTL)}
#define KC_asMHEN  {NORMAL, MODDED(INT5,LALT|LSFT)}
#define KC_scMHEN  {NORMAL, MODDED(INT5,LSFT|LCTL)}
#define KC_acsMHEN {NORMAL, MODDED(INT5,LALT|LCTL|LSFT)}


/* USB HID Keyboard/Keypad Usage(0x07) */
enum hid_keyboard_keypad_usage {
    KEY_NO               = 0x00,
    KEY_ROLL_OVER,
    KEY_POST_FAIL,
    KEY_UNDEFINED,
    KEY_A,
    KEY_B,
    KEY_C,
    KEY_D,
    KEY_E,
    KEY_F,
    KEY_G,
    KEY_H,
    KEY_I,
    KEY_J,
    KEY_K,
    KEY_L,
    KEY_M,               /* 0x10 */
    KEY_N,
    KEY_O,
    KEY_P,
    KEY_Q,
    KEY_R,
    KEY_S,
    KEY_T,
    KEY_U,
    KEY_V,
    KEY_W,
    KEY_X,
    KEY_Y,
    KEY_Z,
    KEY_1,
    KEY_2,
    KEY_3,               /* 0x20 */
    KEY_4,
    KEY_5,
    KEY_6,
    KEY_7,
    KEY_8,
    KEY_9,
    KEY_0,
    KEY_ENTER,
    KEY_ESCAPE,
    KEY_BSPACE,
    KEY_TAB,
    KEY_SPACE,
    KEY_MINUS,
    KEY_EQUAL,
    KEY_LBRACKET,
    KEY_RBRACKET,        /* 0x30 */
    KEY_BSLASH,          /* \ (and |) */
    KEY_NONUS_HASH,      /* Non-US # and ~ */
    KEY_SCOLON,          /* ; (and :) */
    KEY_QUOTE,           /* ' and " */
    KEY_GRAVE,           /* Grave accent and tilde */
    KEY_COMMA,           /* , and < */
    KEY_DOT,             /* . and > */
    KEY_SLASH,           /* / and ? */
    KEY_CAPSLOCK,
    KEY_F1,
    KEY_F2,
    KEY_F3,
    KEY_F4,
    KEY_F5,
    KEY_F6,
    KEY_F7,              /* 0x40 */
    KEY_F8,
    KEY_F9,
    KEY_F10,
    KEY_F11,
    KEY_F12,
    KEY_PSCREEN,
    KEY_SCKLOCK,
    KEY_PAUSE,
    KEY_INSERT,
    KEY_HOME,
    KEY_PGUP,
    KEY_DELETE,
    KEY_END,
    KEY_PGDOWN,
    KEY_RIGHT,
    KEY_LEFT,            /* 0x50 */
    KEY_DOWN,
    KEY_UP,
    KEY_NUMLOCK,
    KEY_KP_SLASH,
    KEY_KP_ASTERISK,
    KEY_KP_MINUS,
    KEY_KP_PLUS,
    KEY_KP_ENTER,
    KEY_KP_1,
    KEY_KP_2,
    KEY_KP_3,
    KEY_KP_4,
    KEY_KP_5,
    KEY_KP_6,
    KEY_KP_7,
    KEY_KP_8,            /* 0x60 */
    KEY_KP_9,
    KEY_KP_0,
    KEY_KP_DOT,
    KEY_NONUS_BSLASH,    /* Non-US \ and | */
    KEY_APPLICATION,
    KEY_POWER,
    KEY_KP_EQUAL,
    KEY_F13,
    KEY_F14,
    KEY_F15,
    KEY_F16,
    KEY_F17,
    KEY_F18,
    KEY_F19,
    KEY_F20,
    KEY_F21,             /* 0x70 */
    KEY_F22,
    KEY_F23,
    KEY_F24,
    KEY_EXECUTE,
    KEY_HELP,
    KEY_MENU,
    KEY_SELECT,
    KEY_STOP,
    KEY_AGAIN,
    KEY_UNDO,
    KEY_CUT,
    KEY_COPY,
    KEY_PASTE,
    KEY_FIND,
    KEY__MUTE,
    KEY__VOLUP,          /* 0x80 */
    KEY__VOLDOWN,
    KEY_LOCKING_CAPS,    /* locking Caps Lock */
    KEY_LOCKING_NUM,     /* locking Num Lock */
    KEY_LOCKING_SCROLL,  /* locking Scroll Lock */
    KEY_KP_COMMA,
    KEY_KP_EQUAL_AS400,  /* equal sign on AS/400 */
    KEY_INT1,
    KEY_INT2,
    KEY_INT3,
    KEY_INT4,
    KEY_INT5,
    KEY_INT6,
    KEY_INT7,
    KEY_INT8,
    KEY_INT9,
    KEY_LANG1,           /* 0x90 */
    KEY_LANG2,
    KEY_LANG3,
    KEY_LANG4,
    KEY_LANG5,
    KEY_LANG6,
    KEY_LANG7,
    KEY_LANG8,
    KEY_LANG9,
    KEY_ALT_ERASE,
    KEY_SYSREQ,
    KEY_CANCEL,
    KEY_CLEAR,
    KEY_PRIOR,
    KEY_RETURN,
    KEY_SEPARATOR,
    KEY_OUT,             /* 0xA0 */
    KEY_OPER,
    KEY_CLEAR_AGAIN,
    KEY_CRSEL,
    KEY_EXSEL,           /* 0xA4 */

    /* Modifiers */
    KEY_LCTRL            = 0xE0,
    KEY_LSHIFT,
    KEY_LALT,
    KEY_LGUI,
    KEY_RCTRL,
    KEY_RSHIFT,
    KEY_RALT,
    KEY_RGUI,
};

#endif
